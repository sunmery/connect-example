name: Test Microservices

on:
  push:
#    branches:
#      - main
    tags:
      - 'v*.*.*'
env:
  #  容器注册表
  REGISTRY: ccr.ccs.tencentyun.com
  HELM_REGISTRY: registry-1.docker.io
  HELM_REGISTRY_USER: lookeke
  # 用户或组织的注册表名
  REGISTER_USER: sumery
  NAMESPACE: connect-example
  # 版本号, git tag的标签名
  # https://docs.github.com/zh/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs#github-context
  VERSION: ${{ github.ref_name }}
#  VERSION: v1.0.5
  # 目标的操作系统
  GOOS: linux
  # 目标的架构
  GOARCH: arm64
  # golang的镜像
  GO_IMAGE: golang:1.25.1-alpine3.22
  # 代理
  GO_PROXY: https://proxy.golang.org
  # golang环境变量
  CGO_ENABLED: 0

jobs:
#  backend-test:
#    runs-on: ubuntu-24.04-arm
#    #    strategy:
#    #      matrix:
#    #        #        service: [address, cart, checkout, credit_card, order, payment, product, user]  # 并行执行多个服务
#    #        service: [backend]  # 并行执行多个服务
#    defaults:
#      run:
#        shell: bash
#        #working-directory: ${{ matrix.service }}
#        working-directory: backend
#    #    services:
#    #      postgres:
#    #        image: postgres:17-alpine
#    #        env:
#    #          POSTGRES_USER: postgres
#    #          POSTGRES_PASSWORD: postgres
#    #          POSTGRES_DB: postgres
#    #        options: >-
#    #          --health-cmd pg_isready
#    #          --health-interval 10s
#    #          --health-timeout 5s
#    #          --health-retries 5
#    #        ports:
#    #          - '5432:5432'
#
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v5
#
#      - name: Set up Go
#        uses: actions/setup-go@v5
#        with:
#          go-version: '1.25.1'
#          check-latest: true
#          cache-dependency-path: '**/go.sum'
#
#      #      - name: Install migrate
#      #        run: |
#      #          curl -L https://github.com/golang-migrate/migrate/releases/download/v4.18.1/migrate.linux-amd64.tar.gz | tar xvz
#      #          sudo mv migrate /usr/bin/
#      #          which migrate
#      #
#      #      - name: Run database migration
#      #        run: |
#      #          export DB_SOURCE="postgresql://postgres:postgres@localhost:5432/postgres?sslmode=disable"
#      #          if [ -d ${{ matrix.service }} ]; then
#      #            echo "Running migrations..."
#      #            make migrate-up
#      #          else
#      #            echo "Skipping migrations."
#      #          fi
#
#      - name: Run Go tests
#        run: |
#          go test -short -coverprofile=coverage.out ./...
#          go tool cover -html=coverage.out -o coverage.html

  backend-build:
    if: github.ref != 'refs/heads/pre'
#    needs: backend-test
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-24.04-arm
    strategy:
      matrix:
        service_config:
          - { service: connect-example-backend }
    defaults:
      run:
        shell: bash
        working-directory: backend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          # 检出默认分支，以便您可以提交更改
          ref: ${{ github.event.repository.default_branch }}

      # ... (Set up QEMU, Cache, Login, Build/Push Docker Image 步骤保持不变) ...

      # 4. 更新 Helm Chart 的 Image Tag
      - name: Update Helm Chart values.yaml
        run: |
          # 仅运行一次
          yq e '.backend.image.tag = "${{ github.sha }}"' -i helm/values.yaml

      # 5. 打包并推送 Helm Chart 到 OCI
      - name: Bump Chart Version and Package
        run: |
          helm dependency update helm/charts/backend/
          helm package helm/charts/backend/ -d chart-packages/
          echo "${{ secrets.HELM_REGISTRY_PASS }}" | helm registry login registry-1.docker.io -u ${{ env.HELM_REGISTRY_USER }} --password-stdin
          helm push chart-packages/* oci://registry-1.docker.io/${{ env.HELM_REGISTRY_USER }}

      # 6. 暂存更改, 拉取代码, 还原更改
      - name: Stash Changes, Pull, and Pop
        run: |
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          
          # 1. 将所有更改 (被修改的文件和新文件) 添加到索引
          #    这是 'git stash' 保存它们所必需的
          git add helm/values.yaml chart-packages/
          
          # 2. 暂存 (Stash) 更改。这会使工作目录和索引都变干净。
          git stash
          
          # 3. 拉取并变基 (Pull & Rebase)。因为仓库是干净的，所以这一步会成功。
          git pull origin main --rebase
          
          # 4. 还原 (Pop) 刚才暂存的更改。
          #    这些更改现在位于刚刚 rebase 过的最新代码之上了。
          git stash pop

      # 7. 自动提交修改
      # (这个 Action 会找到 'stash pop' 还原回来的更改并提交它们)
      - name: Auto Commit Changes
        uses: stefanzweifel/git-auto-commit-action@v7
        with:
          commit_message: "CI: Auto update image tag to ${{ github.sha }} [skip ci]"

          # 确保 file_pattern 仍然存在，Action 知道要提交什么
          file_pattern: "helm/values.yaml chart-packages/*"

          commit_user_name: "github-actions[bot]"
          commit_user_email: "41898282+github-actions[bot]@users.noreply.github.com"
