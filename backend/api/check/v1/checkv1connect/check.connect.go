// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/check/v1/check.proto

package checkv1connect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	v1 "connect-go-example/api/check/v1"
	connect "connectrpc.com/connect"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CheckServiceName is the fully-qualified name of the CheckService service.
	CheckServiceName = "check.v1.CheckService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CheckServiceReadyProcedure is the fully-qualified name of the CheckService's Ready RPC.
	CheckServiceReadyProcedure = "/check.v1.CheckService/Ready"
)

// CheckServiceClient is a client for the check.v1.CheckService service.
type CheckServiceClient interface {
	Ready(context.Context, *connect.Request[v1.ReadyCheckReq]) (*connect.Response[v1.ReadyCheckReply], error)
}

// NewCheckServiceClient constructs a client for the check.v1.CheckService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCheckServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CheckServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	checkServiceMethods := v1.File_api_check_v1_check_proto.Services().ByName("CheckService").Methods()
	return &checkServiceClient{
		ready: connect.NewClient[v1.ReadyCheckReq, v1.ReadyCheckReply](
			httpClient,
			baseURL+CheckServiceReadyProcedure,
			connect.WithSchema(checkServiceMethods.ByName("Ready")),
			connect.WithClientOptions(opts...),
		),
	}
}

// checkServiceClient implements CheckServiceClient.
type checkServiceClient struct {
	ready *connect.Client[v1.ReadyCheckReq, v1.ReadyCheckReply]
}

// Ready calls check.v1.CheckService.Ready.
func (c *checkServiceClient) Ready(ctx context.Context, req *connect.Request[v1.ReadyCheckReq]) (*connect.Response[v1.ReadyCheckReply], error) {
	return c.ready.CallUnary(ctx, req)
}

// CheckServiceHandler is an implementation of the check.v1.CheckService service.
type CheckServiceHandler interface {
	Ready(context.Context, *connect.Request[v1.ReadyCheckReq]) (*connect.Response[v1.ReadyCheckReply], error)
}

// NewCheckServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCheckServiceHandler(svc CheckServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	checkServiceMethods := v1.File_api_check_v1_check_proto.Services().ByName("CheckService").Methods()
	checkServiceReadyHandler := connect.NewUnaryHandler(
		CheckServiceReadyProcedure,
		svc.Ready,
		connect.WithSchema(checkServiceMethods.ByName("Ready")),
		connect.WithHandlerOptions(opts...),
	)
	return "/check.v1.CheckService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CheckServiceReadyProcedure:
			checkServiceReadyHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCheckServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCheckServiceHandler struct{}

func (UnimplementedCheckServiceHandler) Ready(context.Context, *connect.Request[v1.ReadyCheckReq]) (*connect.Response[v1.ReadyCheckReply], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("check.v1.CheckService.Ready is not implemented"))
}
