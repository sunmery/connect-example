// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/greet/v1/greet.proto

package greetv1connect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	v1 "connect-go-example/api/greet/v1"
	connect "connectrpc.com/connect"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GreetServiceName is the fully-qualified name of the GreetService service.
	GreetServiceName = "greet.v1.GreetService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GreetServiceRegisterProcedure is the fully-qualified name of the GreetService's Register RPC.
	GreetServiceRegisterProcedure = "/greet.v1.GreetService/Register"
	// GreetServiceGetAuthChallengeProcedure is the fully-qualified name of the GreetService's
	// GetAuthChallenge RPC.
	GreetServiceGetAuthChallengeProcedure = "/greet.v1.GreetService/GetAuthChallenge"
	// GreetServiceSubmitAuthProcedure is the fully-qualified name of the GreetService's SubmitAuth RPC.
	GreetServiceSubmitAuthProcedure = "/greet.v1.GreetService/SubmitAuth"
)

// GreetServiceClient is a client for the greet.v1.GreetService service.
type GreetServiceClient interface {
	Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error)
	GetAuthChallenge(context.Context, *connect.Request[v1.AuthChallengeRequest]) (*connect.Response[v1.AuthChallengeResponse], error)
	SubmitAuth(context.Context, *connect.Request[v1.SubmitAuthRequest]) (*connect.Response[v1.SubmitAuthResponse], error)
}

// NewGreetServiceClient constructs a client for the greet.v1.GreetService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGreetServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GreetServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	greetServiceMethods := v1.File_api_greet_v1_greet_proto.Services().ByName("GreetService").Methods()
	return &greetServiceClient{
		register: connect.NewClient[v1.RegisterRequest, v1.RegisterResponse](
			httpClient,
			baseURL+GreetServiceRegisterProcedure,
			connect.WithSchema(greetServiceMethods.ByName("Register")),
			connect.WithClientOptions(opts...),
		),
		getAuthChallenge: connect.NewClient[v1.AuthChallengeRequest, v1.AuthChallengeResponse](
			httpClient,
			baseURL+GreetServiceGetAuthChallengeProcedure,
			connect.WithSchema(greetServiceMethods.ByName("GetAuthChallenge")),
			connect.WithClientOptions(opts...),
		),
		submitAuth: connect.NewClient[v1.SubmitAuthRequest, v1.SubmitAuthResponse](
			httpClient,
			baseURL+GreetServiceSubmitAuthProcedure,
			connect.WithSchema(greetServiceMethods.ByName("SubmitAuth")),
			connect.WithClientOptions(opts...),
		),
	}
}

// greetServiceClient implements GreetServiceClient.
type greetServiceClient struct {
	register         *connect.Client[v1.RegisterRequest, v1.RegisterResponse]
	getAuthChallenge *connect.Client[v1.AuthChallengeRequest, v1.AuthChallengeResponse]
	submitAuth       *connect.Client[v1.SubmitAuthRequest, v1.SubmitAuthResponse]
}

// Register calls greet.v1.GreetService.Register.
func (c *greetServiceClient) Register(ctx context.Context, req *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error) {
	return c.register.CallUnary(ctx, req)
}

// GetAuthChallenge calls greet.v1.GreetService.GetAuthChallenge.
func (c *greetServiceClient) GetAuthChallenge(ctx context.Context, req *connect.Request[v1.AuthChallengeRequest]) (*connect.Response[v1.AuthChallengeResponse], error) {
	return c.getAuthChallenge.CallUnary(ctx, req)
}

// SubmitAuth calls greet.v1.GreetService.SubmitAuth.
func (c *greetServiceClient) SubmitAuth(ctx context.Context, req *connect.Request[v1.SubmitAuthRequest]) (*connect.Response[v1.SubmitAuthResponse], error) {
	return c.submitAuth.CallUnary(ctx, req)
}

// GreetServiceHandler is an implementation of the greet.v1.GreetService service.
type GreetServiceHandler interface {
	Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error)
	GetAuthChallenge(context.Context, *connect.Request[v1.AuthChallengeRequest]) (*connect.Response[v1.AuthChallengeResponse], error)
	SubmitAuth(context.Context, *connect.Request[v1.SubmitAuthRequest]) (*connect.Response[v1.SubmitAuthResponse], error)
}

// NewGreetServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGreetServiceHandler(svc GreetServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	greetServiceMethods := v1.File_api_greet_v1_greet_proto.Services().ByName("GreetService").Methods()
	greetServiceRegisterHandler := connect.NewUnaryHandler(
		GreetServiceRegisterProcedure,
		svc.Register,
		connect.WithSchema(greetServiceMethods.ByName("Register")),
		connect.WithHandlerOptions(opts...),
	)
	greetServiceGetAuthChallengeHandler := connect.NewUnaryHandler(
		GreetServiceGetAuthChallengeProcedure,
		svc.GetAuthChallenge,
		connect.WithSchema(greetServiceMethods.ByName("GetAuthChallenge")),
		connect.WithHandlerOptions(opts...),
	)
	greetServiceSubmitAuthHandler := connect.NewUnaryHandler(
		GreetServiceSubmitAuthProcedure,
		svc.SubmitAuth,
		connect.WithSchema(greetServiceMethods.ByName("SubmitAuth")),
		connect.WithHandlerOptions(opts...),
	)
	return "/greet.v1.GreetService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GreetServiceRegisterProcedure:
			greetServiceRegisterHandler.ServeHTTP(w, r)
		case GreetServiceGetAuthChallengeProcedure:
			greetServiceGetAuthChallengeHandler.ServeHTTP(w, r)
		case GreetServiceSubmitAuthProcedure:
			greetServiceSubmitAuthHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGreetServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGreetServiceHandler struct{}

func (UnimplementedGreetServiceHandler) Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("greet.v1.GreetService.Register is not implemented"))
}

func (UnimplementedGreetServiceHandler) GetAuthChallenge(context.Context, *connect.Request[v1.AuthChallengeRequest]) (*connect.Response[v1.AuthChallengeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("greet.v1.GreetService.GetAuthChallenge is not implemented"))
}

func (UnimplementedGreetServiceHandler) SubmitAuth(context.Context, *connect.Request[v1.SubmitAuthRequest]) (*connect.Response[v1.SubmitAuthResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("greet.v1.GreetService.SubmitAuth is not implemented"))
}
